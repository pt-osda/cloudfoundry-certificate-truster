description = "Cloud Foundry Certificate Truster"

buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
	}

	ext.springCloudVersion = "Angel.SR3"
}

apply plugin: "propdeps"
apply plugin: "propdeps-maven"
apply plugin: "propdeps-idea"
apply plugin: "propdeps-eclipse"
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "io.spring.dependency-management"
apply from: "${rootProject.projectDir}/publish-maven.gradle"

archivesBaseName = "cloudfoundry-certificate-truster"
group = "io.pivotal.spring.cloud"

compileJava {
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
}
compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/libs-release" }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
	}
}

dependencies {
	compile("org.springframework:spring-context")
	compile("org.slf4j:slf4j-api")
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.springframework.boot:spring-boot-starter-logging")
}

ext.javadocLinks = [
	"http://docs.oracle.com/javase/8/docs/api/",
	"http://docs.oracle.com/javaee/7/api/"
] as String[]

jar {
	manifest.attributes["Created-By"] =
		"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
	manifest.attributes["Implementation-Title"] = project.name
	manifest.attributes["Implementation-Version"] = project.version

	from("${rootProject.projectDir}/src/dist") {
		include "license.txt"
		include "notice.txt"
		into "META-INF"
		expand(copyright: new Date().format("yyyy"), version: project.version)
	}
}

javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.links(project.ext.javadocLinks)
	if (JavaVersion.current().isJava8Compatible()) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

task api(type: Javadoc) {
	group = "Documentation"
	description = "Generates aggregated Javadoc API documentation."
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = "src/api/overview.html"
	options.links(project.ext.javadocLinks)
	if (JavaVersion.current().isJava8Compatible()) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
	source(project.sourceSets.main.allJava)
	classpath = files(project.sourceSets.main.compileClasspath)
	maxMemory = "1024m"
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = "Distribution"
	classifier = "docs"
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at docs.spring.io/spring-cloud/docs."

	from (api) {
		into "api"
	}
}

task distZip(type: Zip, dependsOn: docsZip) {
	group = "Distribution"
	classifier = "dist"
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	def baseDir = "${project.name}-${project.version}";

	from("src/dist") {
		include "license.txt"
		include "notice.txt"
		into "${baseDir}"
		expand(copyright: new Date().format("yyyy"), version: project.version)
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}
}

artifacts {
	archives docsZip
	archives distZip
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.7"
}

task updateRootDocs << {
	copy {
		from "src/dist"
		into "${rootProject.projectDir}"
		include "notice.txt"
		expand(copyright: new Date().format("yyyy"), version: project.version)
		rename { filename -> "NOTICE" }
	}

	copy {
		from "src/dist"
		into "${rootProject.projectDir}"
		include "license.txt"
		rename { filename -> "LICENSE" }
	}
}

build.dependsOn("updateRootDocs")


buildscript {
	repositories {
		// mavenLocal()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		// classpath "com.github.pt-osda.java-dependencies-analysis:java-dependencies-analysis:1.0.0-SNAPSHOT"
		classpath "gradle.plugin.com.github.pt-osda.java-dependencies-analysis:java-dependencies-analysis:1.0.0-SNAPSHOT"
	}
}

apply plugin: "com.github.pt-osda.java-dependencies-analysis"